name: Release

on:
  push:
    branches:
      - release

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      release_version: v${{ steps.lookup_release_version.outputs.release_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - uses: actions/setup-go@v1
        with:
          go-version: "1.14"
      - id: yarn_cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn_cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Lookup release version
        id: lookup_release_version
        run: |
          echo "::set-output name=release_version::$(grep -v '^#' ./release-version)"
      - name: Build UI
        run: |
          make ui
      - name: Pack UI assets for release
        working-directory: ui/build
        run: |
          zip -r ../static-assets.zip .
      - name: Create release
        id: create_release
        uses: fleskesvor/create-release@feature/support-target-commitish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.lookup_release_version.outputs.release_version }}
          release_name: Internal Version ${{ steps.lookup_release_version.outputs.release_version }}
          draft: false
          prerelease: false
      - name: Upload UI assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ui/static-assets.zip
          asset_name: static-assets.zip
          asset_content_type: application/zip
      - name: Generate embedded UI assets
        run: |
          NO_ASSET_BUILD_TAG=1 scripts/embed_ui_assets.sh
          cp pkg/uiserver/embedded_assets_handler.go embedded_assets_handler.go
      - name: Pack embedded assets for release
        run: |
          zip -r embedded-assets-golang.zip ./embedded_assets_handler.go
      - name: Upload embedded UI assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./embedded-assets-golang.zip
          asset_name: embedded-assets-golang.zip
          asset_content_type: application/zip
  pd_pr:
    name: Create PD PR
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        branch: [master, release-4.0, release-5.0, release-5.1]
    steps:
      - name: Check out PD code base
        uses: actions/checkout@master
        with:
          repository: tikv/pd
          ref: ${{ matrix.branch }}
      - uses: actions/setup-go@v2
        with:
          go-version: "1.16.5"
      - name: Update TiDB Dashboard in PD code base
        run: |
          go get -d "github.com/pingcap/tidb-dashboard@${{ needs.release.outputs.release_version }}"
          go mod tidy
          make pd-server
          go mod tidy
      - name: Commit PD code base change
        id: git_commit
        run: |
          git config user.name "tidb-dashboard-bot"
          git config user.email "tidb-dashboard-bot@pingcap.com"
          git add go.mod go.sum
          if git status | grep -q "Changes to be committed"
          then
            git commit --signoff --message "Update TiDB Dashboard to ${{ needs.release.outputs.release_version }}"
            echo "::set-output name=committed::1"
          else
            echo "No changes detected, skipped"
          fi
      - name: Set build ID
        id: build_id
        run: echo "::set-output name=id::$(date +%s)"
      - name: Create PR based on PD code base
        uses: peter-evans/create-pull-request@v3
        if: steps.git_commit.outputs.committed == 1
        with:
          token: ${{ secrets.BOT_PAT }}
          branch: update-tidb-dashboard/${{ matrix.branch }}-${{ needs.release.outputs.release_version }}-${{ steps.build_id.outputs.id }}
          title: Update TiDB Dashboard to ${{ needs.release.outputs.release_version }} [${{ matrix.branch }}]
          body: |
            ### What problem does this PR solve?

            Update TiDB Dashboard to ${{ needs.release.outputs.release_version }}.

            Upstream commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }} .

            ### Release note

            ```release-note
            None
            ```
          push-to-fork: tidb-dashboard-bot/pd
